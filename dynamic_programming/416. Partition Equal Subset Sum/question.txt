Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
# DP time: O(2^n) space: O(sum(nums))
        S = sum(nums)
        if S % 2:
            return False
        tar = S // 2
        dpSet = set()
        dpSet.add(0)

        for i in range(len(nums) - 1, -1, -1):
            nextDP = set()
            for num in dpSet:
                comp = num + nums[i]
                if comp == tar:
                    return True
                nextDP.add(num)
                nextDP.add(comp)
            dpSet = nextDP
        
        return False

# DFS(memo)
        # total_sum = sum(nums)
        
        # # 総和が奇数の場合、等しい部分集合に分けることはできません。
        # if total_sum % 2 != 0:
        #     return False
        
        # target = total_sum // 2
        # n = len(nums)
        
        # memo = {}

        # def dfs(index, current_sum):
        #     if current_sum == target:  # 目標値に達した場合はTrue
        #         return True
        #     if current_sum > target or index == n:  # 範囲外または合計が目標を超えた場合はFalse
        #         return False
        #     if (index, current_sum) in memo:  # メモ化された結果を利用
        #         return memo[(index, current_sum)]
            
        #     # Pythonの or 演算子は、左の式から評価を始めて、その結果が True であれば即座に True を返し、残りの式の評価は行いません。これを 短絡評価（short-circuit 
        #     result = dfs(index + 1, current_sum + nums[index]) or dfs(index + 1, current_sum)
        #     memo[(index, current_sum)] = result  # 結果をメモ化
        #     return result
        
        # return dfs(0, 0)
良い変数名に変えて。アッパーケースで